#!/usr/bin/env python3

import os
import sys
import traceback

from Xlib import X
from Xlib import XK
from Xlib import Xatom
from Xlib import Xcursorfont
from Xlib.display import Display
from Xlib.protocol.event import ClientMessage
from Xlib.protocol.event import ConfigureNotify
from subprocess import DEVNULL as DN, Popen
from types import SimpleNamespace


def pairs(iterable):
    iterable = iter(iterable)
    a = next(iterable, None)
    for b in iterable:
        yield a, b
        a = b


def fn(a):
    return a


class Client:
    def __init__(self, window, monitor):
        self.window = window
        self.monitor = monitor
        self.wm = monitor.wm
        self.isfullscreen = False
        self.visible = True
        mask = X.EnterWindowMask | X.StructureNotifyMask
        self.window.change_attributes(event_mask=mask)
        self.window.configure(border_width=self.wm.border_width)
        self.window.change_attributes(border_pixel=self.wm.passivecolor)
        self.wm.dpy.sync()
        self.window.map()

    def focus(self):
        for other in self.wm.clients():
            other.window.change_attributes(border_pixel=self.wm.passivecolor)
        self.window.change_attributes(border_pixel=self.wm.activecolor)
        self.window.configure(stack_mode=X.Above)
        self.monitor.focus()
        self.monitor.selclient = self
        self.window.set_input_focus(X.PointerRoot, X.CurrentTime)
        atom = self.wm.NET_ACTIVE_WINDOW
        self.window.change_property(atom, Xatom.WINDOW, 32, (self.window.id,))
        self.wm.dpy.sync()

    def kill(self):
        WM_DELETE_WINDOW = self.wm.WM_DELETE_WINDOW
        WM_PROTOCOLS = self.wm.WM_PROTOCOLS
        self.wm.dpy.grab_server()
        if WM_DELETE_WINDOW in self.window.get_wm_protocols():
            data = (32, [WM_DELETE_WINDOW, X.CurrentTime, 0, 0, 0])
            xevent = ClientMessage(
                window=self.window, client_type=WM_PROTOCOLS, data=data)
            self.window.send_event(xevent)
        else:
            self.window.destroy()
        self.wm.dpy.sync()
        self.wm.dpy.ungrab_server()

    def resize(self, x, y, w, h, bw=None):
        bw = bw if bw is not None else self.wm.border_width
        w -= 2 * bw
        h -= 2 * bw
        self.window.configure(x=x, y=y, width=w, height=h)
        xevent = ConfigureNotify(
            event=self.window, window=self.window, above_sibling=False,
            x=x, y=y, width=w, height=h, border_width=bw, override=False)
        self.window.send_event(xevent)
        self.wm.dpy.sync()

    def containspoint(self, point):
        x, y = point
        geom = self.window.get_geometry()
        if geom.x <= x < geom.x + geom.width:
            return geom.y <= y < geom.y + geom.width

    def fullscreen(self, full=True):
        NET_WM_STATE = self.wm.NET_WM_STATE
        NET_WM_FULLSCREEN = self.wm.NET_WM_FULLSCREEN
        if not self.isfullscreen and full:
            self.window.change_property(
                NET_WM_STATE, Xatom.ATOM, 32, (1, NET_WM_FULLSCREEN))
            self.isfullscreen = True
            screen = self.monitor.screen
            self.window.configure(stack_mode=X.Above)
            self.resize(screen.x, screen.y, screen.width, screen.height)
            self.focus()
        elif self.isfullscreen and not full:
            self.window.change_property(NET_WM_STATE, Xatom.ATOM, 32, (1, 1))
            self.isfullscreen = False
            self.monitor.arrange()
        self.wm.dpy.sync()

    def master(self):
        self.monitor.clients.remove(self)
        self.monitor.clients.insert(0, self)
        self.monitor.arrange()

    def hide(self):
        if self.visible:
            self.visible = False
            self.window.unmap()
            self.monitor.arrange()

    def show(self):
        if not self.visible:
            self.visible = True
            self.window.map()
            self.monitor.arrange()

    def showhide(self):
        if self.visible:
            self.hide()
        else:
            self.show()


class Monitor:
    def __init__(self, screen, wm):
        self.screen = screen
        self.wm = wm
        self._clients = []
        self._selclient = None
        self.layout = 0
        self.nmaster = 1

    @property
    def selclient(self):
        if self._selclient and self._selclient in self.clients:
            return self._selclient
        if len(self.clients) > 0:
            self._selclient = self.clients[0]
            return self.clients[0]
        return None

    @selclient.setter
    def selclient(self, value):
        if value in self.clients:
            self._selclient = value
        else:
            raise ValueError("Client is not part of this monitor")

    @property
    def clients(self):
        return [c for c in self._clients if c.visible]

    def addclient(self, client, focus=False):
        client.monitor = self
        self._clients.insert(0, client)
        self.selclient = client
        if focus:
            client.focus()

    def arrange(self):
        self.wm.arrange(self)

    def createclient(self, window, focus=True):
        self.addclient(Client(window, self), focus)

    def focus(self):
        self.wm.selmon = self

    def removeclient(self, client):
        if client in self._clients:
            self._clients.remove(client)

    def setlayout(self, layout):
        self.layout = layout

    def killclient(self):
        if self.selclient:
            self.selclient.kill()

    def containspoint(self, point):
        if self.screen is None:
            return False
        x, y = point
        if self.screen.x <= x < self.screen.x + self.screen.width:
            return self.screen.y <= y < self.screen.y + self.screen.width

    def inclayout(self):
        self.layout = (1 + self.layout) % len(self.wm.layouts)
        self.arrange()


class WindowManager:
    def __init__(self, keys, layouts):
        self.dpy = Display()
        self.screen = self.dpy.screen()
        self.root = self.screen.root
        colormap = self.screen.default_colormap
        self.activecolor = colormap.alloc_named_color("#111111").pixel
        self.passivecolor = colormap.alloc_named_color("#000000").pixel
        self.screenwidth = self.root.get_geometry().width
        self.screenheight = self.root.get_geometry().height
        self.monitors = []
        self.hidden = []
        self._selmon = None
        self.numlockmask = 0
        self.border_width = 1
        self.keys = keys
        self.layouts = layouts
        self.updategeometry()
        self.WM_PROTOCOLS = self.dpy.intern_atom("WM_PROTOCOLS")
        self.WM_DELETE_WINDOW = self.dpy.intern_atom("WM_DELETE_WINDOW")
        self.WM_FULL_SCREEN = self.dpy.intern_atom("_NET_WM_STATE_FULLSCREEN")
        self.NET_WM_STATE = self.dpy.intern_atom("_NET_WM_STATE")
        self.NET_ACTIVE_WINDOW = self.dpy.intern_atom("_NET_ACTIVE_WINDOW")
        self.NET_WM_STATE = self.dpy.intern_atom("_NET_WM_STATE")
        self.NET_WM_FULLSCREEN = self.dpy.intern_atom("_NET_WM_FULLSCREEN")
        self.root.change_attributes(
            event_mask=X.SubstructureRedirectMask | X.SubstructureNotifyMask |
            X.ButtonPressMask | X.PointerMotionMask |
            X.EnterWindowMask | X.LeaveWindowMask)
        self.grabkeys()
        for window in self.root.query_tree().children:
            attrs = window.get_attributes()
            if attrs.map_state == X.IsViewable:
                geom = window.get_geometry()
                point = geom.x, geom.y
                for mon in self.monitors:
                    if mon.containspoint(point):
                        mon.createclient(window, focus=False)
                        break
                else:
                    self.selmon.createclient(window, focus=False)

        font = self.dpy.open_font("cursor")
        cursor = font.create_glyph_cursor(
            font, Xcursorfont.left_ptr, Xcursorfont.left_ptr + 1,
            (65535, 65535, 65535), (0, 0, 0))
        self.root.change_attributes(cursor=cursor)
        self.arrange()
        self.focusmouse()

    @property
    def selmon(self):
        if self._selmon:
            return self._selmon
        return self.monitors[0]

    @selmon.setter
    def selmon(self, value):
        self._selmon = value

    def arrange(self, monitor=None):
        for mon in (monitor and [monitor]) or self.monitors:
            self.layouts[mon.layout](self, mon)
        self.dpy.sync()

    def clientmessage(self, xevent):
        WM_FULL_SCREEN = self.WM_FULL_SCREEN
        NET_WM_STATE = self.NET_WM_STATE
        client = self.windowtoclient(xevent.window)
        if client is None:
            return
        size, data = xevent.data
        if xevent.client_type == NET_WM_STATE:
            if data[1] == WM_FULL_SCREEN or data[2] == WM_FULL_SCREEN:
                gofull = data[0] == 2 and not client.isfullscreen
                client.fullscreen(data[0] == 1 or gofull)

    def clients(self):
        for mon in self.monitors:
            yield from mon.clients

    def configurenotify(self, xevent):
        if xevent.window == self.root:
            return NotImplemented

    def configurerequest(self, xevent):
        client = self.windowtoclient(xevent.window)
        if client:
            client.resize(xevent.x, xevent.y, xevent.width, xevent.height)
            client.monitor.arrange()

    def destroynotify(self, xevent):
        client = self.windowtoclient(xevent.window)
        if client:
            self.dpy.grab_server()
            self.dpy.set_close_down_mode(X.DestroyAll)
            self.dpy.sync()
            self.dpy.ungrab_server()
            client.monitor.removeclient(client)
            client.monitor.arrange()

    def enternotify(self, xevent):
        if xevent.mode != X.NotifyNormal or xevent.detail == X.NotifyInferior:
            if xevent.window != self.root:
                return
        client = self.windowtoclient(xevent.window)
        monitor = self.windowtomonitor(xevent.window)
        client = client or monitor.selclient
        if client:
            client.focus()

    def expose(self, xevent):
        return NotImplemented

    def focus(self, client=None):
        client = client or self.selmon.selclient
        if client:
            client.focus()

    def focusin(self, xevent):
        if xevent.window == self.selmon.selclient.window:
            return
        client = self.windowtoclient(xevent.window)
        if client:
            client.focus()

    def focusmon(self, direction):
        index = self.monitors.index(self.selmon) + len(self.monitors)
        self.selmon = self.monitors[index % len(self.monitors)]

    def focusmouse(self):
        pointer = self.root.query_pointer()
        point = pointer.root_x, pointer.root_y
        self.focuspoint(point)

    def focuspoint(self, point):
        for mon in self.monitors:
            if mon.containspoint(point):
                self.selmon = mon
                break
        for client in self.clients():
            if client.containspoint(point):
                client.focus()
                return

    def grabkeys(self):
        self.updatenumlockmask()
        self.root.ungrab_key(X.AnyKey, X.AnyModifier)
        mods = [0, X.LockMask, self.numlockmask, self.numlockmask | X.LockMask]
        mode = X.GrabModeAsync
        for m in mods:
            for key, mod in self.keys:
                key = self.dpy.keysym_to_keycode(key)
                self.root.grab_key(key, m | mod, 1, mode, mode)

    def hideclient(self):
        client = self.selmon.selclient
        if client:
            self.hidden.append(client)
            client.hide()
            self.focusmouse()

    def showclient(self):
        if len(self.hidden) > 0:
            client = self.hidden.pop()
            client.show()
            client.focus()

    def showhideclient(self):
        if len(self.hidden) > 0:
            self.showclient()
        else:
            self.hideclient()

    def keypress(self, xevent):
        mod = (xevent.state & ~(self.numlockmask | X.LockMask) &
               (X.ShiftMask | X.ControlMask | X.Mod1Mask | X.Mod2Mask |
               X.Mod3Mask | X.Mod4Mask | X.Mod5Mask))
        keysym = self.dpy.keycode_to_keysym(xevent.detail, 0)
        self.keys.get((keysym, mod), fn)(self)

    def killclient(self):
        self.selmon.killclient()

    def maprequest(self, xevent):
        # attrs = xevent.window.get_attributes()
        # if attrs.map_state == X.IsViewable:
        self.selmon.createclient(xevent.window)
        self.arrange(self.selmon)

    def mappingnotify(self, xevent):
        self.dpy.refresh_keyboard_mapping(xevent)
        self.grabkeys()

    def master(self):
        if self.selmon.selclient:
            self.selmon.selclient.master()

    def motionnotify(self, xevent):
        if xevent.window != self.root:
            return
        point = self.cursorx, self.cursory = xevent.event_x, xevent.event_y
        selclient = self.selmon.selclient
        if selclient and selclient.containspoint(point):
            return
        self.focuspoint(point)

    def propertynotify(self, xevent):
        return NotImplemented

    def quit(self):
        self.running = False

    def updategeometry(self):
        if self.dpy.has_extension('XINERAMA'):
            info = self.dpy.xinerama_query_screens().screens
            screens = dict(((s.x, s.y, s.width, s.height), s) for s in info)
            screens = list(screens.values())
            if len(screens) > len(self.monitors):
                more = len(screens) - len(self.monitors)
                self.monitors.extend(Monitor(None, self) for _ in range(more))
            elif len(screens) < len(self.monitors):
                for mon in self.monitors[len(screens):]:
                    self.monitors[0].clients.extend(mon.clients)
                self.monitors = self.monitors[:len(screens)]
            for mon, screen in zip(self.monitors, screens):
                mon.screen = screen
        else:
            if len(self.monitors) == 0:
                self.monitors.append(Monitor(None, self))
            mon = self.monitors[0]
            geom = self.root.get_geometry()
            width, height = geom.width, geom.height
            mon.screen = SimpleNamespace(x=0, y=0, width=width, height=height)

    def updatenumlockmask(self):
        mappings = self.dpy.get_modifier_mapping()
        numlock = self.dpy.keysym_to_keycode(XK.XK_Num_Lock)
        for i, l in enumerate(mappings):
            if numlock in l:
                self.numlockmask = 1 << i

    def unmapnotify(self, xevent):
        client = self.windowtoclient(xevent.window)
        if client:
            client.monitor.removeclient(client)
            xevent.window.unmap()
            self.arrange(client.monitor)
            self.focusmouse()

    def windowtoclient(self, window):
        for client in self.clients():
            if client.window == window:
                return client
        return None

    def windowtomonitor(self, window):
        geom = window.get_geometry()
        point = geom.x, geom.y
        for mon in self.monitors:
            if mon.containspoint(point):
                return mon
        return self.selmon

    def run(self):
        self.running = True
        while self.running:
            event = self.dpy.next_event()
            call = {
                X.ClientMessage: self.clientmessage,
                X.ConfigureRequest: self.configurerequest,
                X.ConfigureNotify: self.configurenotify,
                X.DestroyNotify: self.destroynotify,
                X.EnterNotify: self.enternotify,
                X.Expose: self.expose,
                X.FocusIn: self.focusin,
                X.KeyPress: self.keypress,
                X.MappingNotify: self.mappingnotify,
                X.MapRequest: self.maprequest,
                X.MotionNotify: self.motionnotify,
                X.PropertyNotify: self.propertynotify,
                X.UnmapNotify: self.unmapnotify,
            }.get(event.type, lambda a: None)
            if call(event) == NotImplemented:
                print(f"pywm: Handler for {event!r} not implemented",
                      file=sys.stderr, flush=True)


def tile(wm, mon):
    width = mon.screen.width // (1 + (len(mon.clients) > mon.nmaster))
    height = mon.screen.height
    x = mon.screen.x
    y = mon.screen.y

    for i, client in zip(range(mon.nmaster), mon.clients):
        cheight = height // mon.nmaster
        cy = y + i * cheight
        client.resize(x, cy, width, cheight)

    x += width
    for i, client in enumerate(mon.clients[mon.nmaster:]):
        cheight = height // (len(mon.clients) - mon.nmaster)
        cy = y + i * cheight
        client.resize(x, cy, width, cheight)


def monocole(wm, monitor):
    if monitor.selclient:
        x, y = monitor.screen.x, monitor.screen.y
        width, height = monitor.screen.width, monitor.screen.height
        monitor.selclient.resize(x, y, width, height)


def focusnext(wm):
    clients = list(wm.clients())
    for c1, c2 in pairs(clients):
        if c1 == wm.selmon.selclient:
            c2.focus()
            return c2.monitor.arrange()
    if len(clients) > 0:
        clients[0].focus()


def client_to_mon(wm, offset=1):
    client = wm.selmon.selclient
    if client:
        index = wm.monitors.index(wm.selmon)
        wm.selmon.removeclient(client)
        newindex = (index + len(wm.monitors) + offset) % len(wm.monitors)
        wm.selmon = wm.monitors[newindex]
        wm.selmon.addclient(client)
        wm.arrange()


def flop_mons(wm):
    screens = [mon.screen for mon in wm.monitors]
    for screen, mon in zip(screens[1:] + [screens[0]], wm.monitors):
        mon.screen = screen
    wm.arrange()
    wm.focusmouse()


run = fn(lambda cmd: Popen(cmd, shell=True, stdin=DN, stdout=DN))
lazy = fn(lambda cmd: (lambda wm: run(cmd)))
to_dwm = fn(lambda wm: (wm and wm.dpy.close(), os.execvp("dwm", ["dwm"])))
restart = fn(lambda wm: (wm and wm.dpy.close(), os.execvp("pywm", ["pywm"])))
dmenu_run = fn(lambda wm: run(f"dmenu_run -m {wm.monitors.index(wm.selmon)}"))


def main():
    global wm
    alt = X.Mod1Mask
    shift = X.ShiftMask
    keys = {
        (XK.XK_m, alt): (lambda wm: wm.hideclient()),
        (XK.XK_m, alt | shift): (lambda wm: wm.showhideclient()),
        (XK.XK_q, alt): to_dwm,
        (XK.XK_q, shift | alt): (lambda wm: wm.quit()),
        (XK.XK_r, alt): restart,
        (XK.XK_Escape, alt): (lambda wm: wm.killclient()),
        (XK.XK_j, alt): focusnext,
        (XK.XK_Return, alt): lazy("st"),
        (XK.XK_Return, alt | shift): (lambda wm: wm.master()),
        (XK.XK_p, alt): dmenu_run,
        (XK.XK_comma, alt | shift): client_to_mon,
        (XK.XK_Tab, alt): flop_mons,
        (XK.XK_g, alt): lazy("firefox"),
        (XK.XK_space, alt): (lambda wm: wm.selmon.inclayout()),
        (XK.XK_Tab, alt): flop_mons,
        (XK.XK_d, alt): lazy("discord"),
        (XK.XK_a, alt): lazy("dmenu_audio"),
        (XK.XK_a, alt | shift): lazy("audio"),
        (XK.XK_v, alt): lazy("volume down"),
        (XK.XK_v, alt | shift): lazy("volume up"),
    }
    layouts = [tile, monocole]
    wm = WindowManager(keys, layouts)
    wm.run()


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        traceback.print_exc()
        print(str(e), file=sys.stderr, flush=True)
        restart(None)
